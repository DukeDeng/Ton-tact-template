import {Address, contractAddress, toNano} from "@ton/core";
import {TonClient4, WalletContractV4} from "@ton/ton";
import { SampleTactContract } from "./output/sample_SampleTactContract";
import { mnemonicToPrivateKey } from "@ton/crypto";

const Sleep = (ms: number) => {
    return new Promise(resolve => setTimeout(resolve, ms));
};

(async () => {
    const client = new TonClient4({
        endpoint: "https://sandbox-v4.tonhubapi.com", // ðŸ”´ Test-net API endpoint
    });

    // open wallet v4 (notice the correct wallet version here)
    const mnemonic = "panel fancy hidden pride noodle oil history demise other1 route curious select always dice else cool staff olive stone unfair business twelve gun crouch";
    const key = await mnemonicToPrivateKey(mnemonic.split(" "));
    const wallet = await WalletContractV4.create({publicKey: key.publicKey, workchain: 0});
    console.log("public key: " + key.publicKey);

    // open wallet and read the current seqno of the wallet
    const walletContract = client.open(wallet);
    const walletSender = walletContract.sender(key.secretKey);
    
    //  open the contact address
    let owner = Address.parse("0QBVC0o9Z8S2eCf6-nQhEWRScg5Fotw-boObjMDS2zEXg2gU");
    let init = await SampleTactContract.init(owner);
    let contract_address =  contractAddress(0, init);
    let contract = await SampleTactContract.fromAddress(contract_address);
    let contract_open = await client.open(contract);

    // send message to contract
    await contract_open.send(walletSender, { value: toNano(1) }, "increment");

    await Sleep(3000); // wait for 10 seconds for the message to be processed
    console.log("Contract value: " + (await contract_open.getCounter()));
})();